// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyTasks.DbOperations.Context;

#nullable disable

namespace MyTasks.DbOperations.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("MyTasks.Models.Models.LoginModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("FakeUser")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Login");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            FakeUser = true,
                            PasswordHash = "admin123",
                            Type = 0,
                            UserId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            FakeUser = true,
                            PasswordHash = "user123",
                            Type = 1,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Username = "user"
                        });
                });

            modelBuilder.Entity("MyTasks.Models.Models.ProjectModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Description = "Project for admin user",
                            Name = "Admin Project",
                            OwnerId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            Description = "Sample project for regular user",
                            Name = "Demo Project",
                            OwnerId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("MyTasks.Models.Models.TaskCommentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TaskItemId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TaskItemId");

                    b.ToTable("TaskComment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            AuthorId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Content = "Admin comment 1",
                            CreatedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            TaskItemId = new Guid("77777777-7777-7777-7777-777777777777")
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            AuthorId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Content = "Admin comment 2",
                            CreatedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            TaskItemId = new Guid("88888888-8888-8888-8888-888888888888")
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            AuthorId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Content = "Regular comment 1",
                            CreatedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            TaskItemId = new Guid("99999999-9999-9999-9999-999999999999")
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            AuthorId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Content = "Regular comment 2",
                            CreatedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            TaskItemId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        });
                });

            modelBuilder.Entity("MyTasks.Models.Models.TaskItemModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssignedUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("ProjectId");

                    b.ToTable("TaskItem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            AssignedUserId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Description = "First task for admin",
                            IsCompleted = false,
                            ProjectId = new Guid("55555555-5555-5555-5555-555555555555"),
                            Title = "Admin Task 1"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            AssignedUserId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Description = "Second task for admin",
                            IsCompleted = true,
                            ProjectId = new Guid("55555555-5555-5555-5555-555555555555"),
                            Title = "Admin Task 2"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            AssignedUserId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Description = "First task for regular user",
                            IsCompleted = false,
                            ProjectId = new Guid("66666666-6666-6666-6666-666666666666"),
                            Title = "Regular Task 1"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AssignedUserId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Description = "Second task for regular user",
                            IsCompleted = true,
                            ProjectId = new Guid("66666666-6666-6666-6666-666666666666"),
                            Title = "Regular Task 2"
                        });
                });

            modelBuilder.Entity("MyTasks.Models.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("LoginId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            FullName = "Admin User",
                            IsDeleted = false,
                            LoginId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            FullName = "Regular User",
                            IsDeleted = false,
                            LoginId = new Guid("44444444-4444-4444-4444-444444444444")
                        });
                });

            modelBuilder.Entity("MyTasks.Models.Models.LoginModel", b =>
                {
                    b.HasOne("MyTasks.Models.Models.UserModel", "User")
                        .WithOne("LoginModel")
                        .HasForeignKey("MyTasks.Models.Models.LoginModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTasks.Models.Models.ProjectModel", b =>
                {
                    b.HasOne("MyTasks.Models.Models.UserModel", "Owner")
                        .WithMany("Projects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MyTasks.Models.Models.TaskCommentModel", b =>
                {
                    b.HasOne("MyTasks.Models.Models.UserModel", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyTasks.Models.Models.TaskItemModel", "TaskItem")
                        .WithMany("Comments")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("MyTasks.Models.Models.TaskItemModel", b =>
                {
                    b.HasOne("MyTasks.Models.Models.UserModel", "AssignedUser")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("MyTasks.Models.Models.ProjectModel", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MyTasks.Models.Models.ProjectModel", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("MyTasks.Models.Models.TaskItemModel", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MyTasks.Models.Models.UserModel", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("LoginModel");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
